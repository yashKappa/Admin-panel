<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
    <meta http-equiv="X-UA-compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.6.0/mammoth.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.27.0/ace.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@2.1.3/css/boxicons.min.css">
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <link rel="stylesheet" href="../admin/style.css">   
    <link rel="database" href="../database.js">
    <link rel="script" href="../admin/script.js">
</head>
<body>


	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="#" class="brand">
			<i class='bx bxs-smile'></i>
			<span class="text">Piads_Admin</span>
		</a>
		<ul class="side-menu top">
			<li class="active">
				<a href="#">
					<i class='bx bxs-dashboard' ></i>
					<span class="text">Dashboard</span>
				</a>
			</li>
			<li>
				<a href="../student">
                    <i class='bx bxs-graduation' ></i>
					<span class="text">Student</span>
				</a>
			</li>
			<li>
				<a href="../teacher">
					<i class='bx bxs-chalkboard'></i>
					<span class="text">Teacher</span>
				</a>
			</li>
			<li>
				<a href="../developer">
					<i class='bx bx-code'></i>
					<span class="text">Developer</span>
				</a>
			</li>
			<li>
				<a href="#">
					<i class='bx bxs-group' ></i>
					<span class="text">Team</span>
				</a>
			</li>
		</ul>
		<ul class="side-menu">
			<li>
				<a href="#">
					<i class='bx bxs-cog' ></i>
					<span class="text">Settings</span>
				</a>
			</li>
			<li>
				<a href="#" class="logout">
					<i class='bx bxs-log-out-circle' ></i>
					<span class="text">Logout</span>
				</a>
			</li>
		</ul>

		
	</section>
	<!-- SIDEBAR -->



	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<i class='bx bx-menu' ></i>
			<form action="#">
			</form>
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
	</nav>
		<!-- NAVBAR -->

		<!-- MAIN -->
		<main>
			<h1>Dashboard</h1>

			<div class="head">
				<h2>Teacher</h2>
			</div>
			<ul class="box-info">

				<li>
					<i class='bx bxs-calendar-check'></i>
					<span class="text">
					  <h3 id="newUserCount">Loading...</h3>
					  <p>New Users</p>
					</span>
				  </li>

					<li>
					  <i class='bx bxs-user'></i>
					  <span class="text">
						<h3 id="totalUsersCount">Loading...</h3>
						<p>Old Users</p>
					  </span>
					</li>
				
					<li>
						<i class='bx bxs-group'></i>
						<span class="text">
						  <h3 id="maxUsersCount">Loading...</h3>
						  <p>Total Users</p>
						</span>
					  </li>

					  <div class="graph1">
						<canvas id="userBarChart1" width="400" height="600"></canvas>
					</div>

					<div class="teacher-date">
						<canvas id="teacherCountChart"></canvas>
						<button id="previousTeacherWeek"><i class="fas fa-chevron-left"></i> Previous Week</button>
						<button id="nextTeacherWeek">Next Week <i class="fas fa-chevron-right"></i></button>
					</div>
					

			</ul>

			<div class="stu">
				<h2>Student</h2>
			</div>
			<ul class="box-info">

				<li>
					<i class='bx bxs-calendar-check'></i>
					<span class="text">
						<h3 id="newUserCountx">Loading...</h3>
						<p>New Users</p>
					</span>
				</li>
				<li>
					<i class='bx bxs-user'></i>
					<span class="text">
						<h3 id="totalUsersCountx">Loading...</h3>
						<p>Old Users</p>
					</span>
				</li>
				
				
					<li>
						<i class='bx bxs-group'></i>
						<span class="text">
						  <h3 id="maxUserCount">Loading...</h3>
						  <p>Total Users</p>
						</span>
					  </li>
					  
					  <div class="graph">
						<canvas id="userBarChart" width="400" height="600"></canvas>
					</div>

					<div class="date">
						<canvas id="userCountChart" ></canvas>
						<button id="previousWeek"><i class="fas fa-chevron-left"></i> </i>Previous Week</button>
						<button id="nextWeek">Next Week <i class="fas fa-chevron-right"></i></button>
					</div>
				
			</ul>
		
	</section>
	<!-- CONTENT -->
	

	<script src="script.js"></script>
</body>

<style>
	@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Poppins:wght@400;500;600;700&display=swap');
  
  * {
	  margin: 0;
	  padding: 0;
	  box-sizing: border-box;
  }
  
  a {
	  text-decoration: none;
  }
  
  li {
	  list-style: none;
  }
  
  :root {
	--poppins: 'Poppins', sans-serif;
	--lato: 'Lato', sans-serif;

	--light: #ffffff;
	--blue: #0c7ae9;
	--light-blue: #CFE8FF;
	--grey: #eee;
	--dark-grey: #AAAAAA;
	--dark: #342E37;
	--red: #DB504A;
	--yellow: #FFCE26;
	--light-yellow: #FFF2C6;
	--orange: #FD7238;
	--light-orange: #FFE0D3;
	--primary-color:white;
	--h1-color:black;
  }
  
  html {
	  overflow-x: hidden;
  }
  
  body.dark {
	  --light: #151533;
	  --grey: #060714;
	  --dark: #FBFBFB;
	  --light-blue:black;
	  --primary-color:black;
	  --h1-color:white;
  }
  
  body {
	  background: var(--grey);
	  overflow-x: hidden;
  }
  
  
  
  
  
  /* SIDEBAR */
  #sidebar {
	  position: fixed;
	  top: 0;
	  left: 0;
	  width: 280px;
	  height: 100%;
	  background: var(--light);
	  z-index: 2000;
	  font-family: var(--lato);
	  divansition: .3s ease;
	  overflow-x: hidden;
	  scrollbar-width: none;
  }
  #sidebar::--webkit-scrollbar {
	  display: none;
  }
  #sidebar.hide {
	  width: 60px;
  }
  #sidebar .brand {
	  font-size: 24px;
	  font-weight: 700;
	  height: 56px;
	  display: flex;
	  align-items: center;
	  color: var(--blue);
	  position: sticky;
	  top: 0;
	  left: 0;
	  background: var(--light);
	  z-index: 500;
	  padding-bottom: 20px;
	  box-sizing: content-box;
  }
  #sidebar .brand .bx {
	  min-width: 60px;
	  display: flex;
	  justify-content: center;
  }
  #sidebar .side-menu {
	  width: 100%;
	  margin-top: 48px;
  }
  #sidebar .side-menu li {
	  height: 48px;
	  background: divansparent;
	  margin-left: 6px;
	  border-radius: 48px 0 0 48px;
	  padding: 4px;
  }
  #sidebar .side-menu li.active {
	  background: var(--grey);
	  position: relative;
  }
  #sidebar .side-menu li.active::before {
	  content: '';
	  position: absolute;
	  width: 40px;
	  height: 40px;
	  border-radius: 50%;
	  top: -40px;
	  right: 0;
	  box-shadow: 20px 20px 0 var(--grey);
	  z-index: -1;
  }
  #sidebar .side-menu li.active::after {
	  content: '';
	  position: absolute;
	  width: 40px;
	  height: 40px;
	  border-radius: 50%;
	  bottom: -40px;
	  right: 0;
	  box-shadow: 20px -20px 0 var(--grey);
	  z-index: -1;
  }
  #sidebar .side-menu li a {
	  width: 100%;
	  height: 100%;
	  background: var(--light);
	  display: flex;
	  align-items: center;
	  border-radius: 48px;
	  font-size: 16px;
	  color: var(--dark);
	  white-space: nowrap;
	  overflow-x: hidden;
  }
  #sidebar .side-menu.top li.active a {
	  color: var(--blue);
  }
  #sidebar.hide .side-menu li a {
	  width: calc(48px - (4px * 2));
	  divansition: width .3s ease;
  }
  #sidebar .side-menu li a.logout {
	  color: var(--dark);
  }
  #sidebar .side-menu.top li a:hover {
	  color: var(--blue);
  }
  #sidebar .side-menu li a .bx {
	  min-width: calc(60px  - ((4px + 6px) * 2));
	  display: flex;
	  justify-content: center;
  }
  /* SIDEBAR */
  
  
  
  
  
  /* CONTENT */
  #content {
	  position: relative;
	  width: calc(100% - 280px);
	  left: 280px;
	  divansition: .3s ease;
  }
  #sidebar.hide ~ #content {
	  width: calc(100% - 60px);
	  left: 60px;
  }
  
  
  
  
  /* NAVBAR */
  #content nav {
	  height: 56px;
	  background: var(--light);
	  padding: 0 24px;
	  display: flex;
	  align-items: center;
	  grid-gap: 24px;
	  font-family: var(--lato);
	  position: sticky;
	  top: 0;
	  left: 0;
	  z-index: 1000;
  }
  #content nav::before {
	  content: '';
	  position: absolute;
	  width: 40px;
	  height: 40px;
	  bottom: -40px;
	  left: 0;
	  border-radius: 50%;
	  box-shadow: -20px -20px 0 var(--light);
  }
  #content nav a {
	  color: var(--dark);
  }
  #content nav .bx.bx-menu {
	  cursor: pointer;
	  color: var(--dark);
  }
  #content nav .nav-link {
	  font-size: 16px;
	  divansition: .3s ease;
  }
  #content nav .nav-link:hover {
	  color: var(--blue);
  }
  #content nav form {
	  max-width: 400px;
	  width: 100%;
	  margin-right: auto;
  }
  #content nav form .form-input {
	  display: flex;
	  align-items: center;
	  height: 36px;
  }
  #content nav form .form-input input {
	  flex-grow: 1;
	  padding: 0 16px;
	  height: 100%;
	  border: none;
	  background: var(--grey);
	  border-radius: 36px 0 0 36px;
	  outline: none;
	  width: 100%;
	  color: var(--dark);
  }
  #content nav form .form-input button {
	  width: 36px;
	  height: 100%;
	  display: flex;
	  justify-content: center;
	  align-items: center;
	  background: var(--blue);
	  color: var(--light);
	  font-size: 18px;
	  border: none;
	  outline: none;
	  border-radius: 0 36px 36px 0;
	  cursor: pointer;
  }
  #content nav .notification {
	  font-size: 20px;
	  position: relative;
  }
  #content nav .notification .num {
	  position: absolute;
	  top: -6px;
	  right: -6px;
	  width: 20px;
	  height: 20px;
	  border-radius: 50%;
	  border: 2px solid var(--light);
	  background: var(--red);
	  color: var(--light);
	  font-weight: 700;
	  font-size: 12px;
	  display: flex;
	  justify-content: center;
	  align-items: center;
  }
  #content nav .profile img {
	  width: 36px;
	  height: 36px;
	  object-fit: cover;
	  border-radius: 50%;
  }
  #content nav .switch-mode {
	display: block;
	min-width: 50px;
	height: 25px;
	border-radius: 25px;
	background: var(--primary-color);
	cursor: pointer;
	position: relative;
}
#content nav .switch-mode::before {
	content: '';
	position: absolute;
	top: 2px;
	left: 2px;
	bottom: 2px;
	width: calc(25px - 4px);
	background: var(--blue);
	border-radius: 50%;
	transition: all .3s ease;
}
#content nav #switch-mode:checked + .switch-mode::before {
	left: calc(100% - (25px - 4px) - 2px);
	
}
  /* NAVBAR */
  
  
  
  
  
  /* MAIN */
  #content main {
	  width: 100%;
	  padding: 36px 24px;
	  font-family: var(--poppins);
	  max-height: calc(100vh - 56px);
	  overflow-y: auto;
  }
  #content main .head-title {
	  display: flex;
	  align-items: center;
	  justify-content: space-between;
	  grid-gap: 16px;
	  flex-wrap: wrap;
  }
  #content main .head-title .left h1 {
	  font-size: 36px;
	  font-weight: 600;
	  margin-bottom: 10px;
	  color: var(--dark);
  }
  #content main .head-title .left .breadcrumb {
	  display: flex;
	  align-items: center;
	  grid-gap: 16px;
  }
  #content main .head-title .left .breadcrumb li {
	  color: var(--dark);
  }
  #content main .head-title .left .breadcrumb li a {
	  color: var(--dark-grey);
	  pointer-events: none;
  }
  #content main .head-title .left .breadcrumb li a.active {
	  color: var(--blue);
	  pointer-events: unset;
  }
  #content main .head-title .btn-download {
	  height: 36px;
	  padding: 0 16px;
	  border-radius: 36px;
	  background: var(--blue);
	  color: var(--light);
	  display: flex;
	  justify-content: center;
	  align-items: center;
	  grid-gap: 10px;
	  font-weight: 500;
  }
  
  
  
  
  #content main .box-info {
	  display: grid;
	  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
	  grid-gap: 24px;
	  margin-top: 36px;
  }
  #content main .box-info li {
	  padding: 24px;
	  background: var(--light);
	  border-radius: 20px;
	  display: flex;
	  align-items: center;
	  grid-gap: 24px;
  }
  #content main .box-info li .bx {
	  width: 80px;
	  height: 80px;
	  border-radius: 10px;
	  font-size: 36px;
	  display: flex;
	  justify-content: center;
	  align-items: center;
  }
  #content main .box-info li:nth-child(1) .bx {
	  background: var(--light-blue);
	  color: var(--blue);
  }
  #content main .box-info li:nth-child(2) .bx {
	  background: var(--light-yellow);
	  color: var(--yellow);
  }
  #content main .box-info li:nth-child(3) .bx {
	  background: var(--light-orange);
	  color: var(--orange);
  }
  #content main .box-info li .text h3 {
	  font-size: 24px;
	  font-weight: 600;
	  color: var(--dark);
  }
  #content main .box-info li .text p {
	  color: var(--dark);	
  }
  
  .font{
	  color: #2e2b2b;
  }
  
  
  
  
  #content main .table-data {
	  display: flex;
	  flex-wrap: wrap;
	  grid-gap: 24px;
	  margin-top: 24px;
	  width: 100%;
	  color: var(--dark);
  }
  #content main .table-data > div {
	  border-radius: 20px;
	  background: var(--light-blue);
	  padding: 24px;
	  overflow-x: auto;
  }
  #content main .table-data .head {
	  display: flex;
	  align-items: center;
	  grid-gap: 16px;
	  margin-bottom: 24px;
  }
  #content main .table-data .head h3 {
	  margin-right: auto;
	  font-size: 24px;
	  font-weight: 600;
  }
  #content main .table-data .head .bx {
	  cursor: pointer;
  }
  
  #content main .table-data .order {
	  flex-grow: 1;
	  flex-basis: 500px;
  }
  #content main .table-data .order table {
	  width: 100%;
	  border-collapse: collapse;
  }
  #content main .table-data .order table th {
	  padding-bottom: 12px;
	  font-size: 13px;
	  text-align: left;
	  border-bottom: 1px solid var(--grey);
  }
  #content main .table-data .order table div {
	  padding: 16px 0;
  }
  #content main .table-data .order table div div:first-child {
	  display: flex;
	  align-items: center;
	  grid-gap: 12px;
	  padding-left: 6px;
  }
  #content main .table-data .order table div img {
	  width: 36px;
	  height: 36px;
	  border-radius: 50%;
	  object-fit: cover;
  }
  #content main .table-data .order table tbody div:hover {
	  background: var(--grey);
	  color: #000;
  }
  #content main .table-data .order table div div .status {
	  font-size: 10px;
	  padding: 6px 16px;
	  color: var(--light);
	  border-radius: 20px;
	  font-weight: 700;
  }
  #content main .table-data .order table div div .status.completed {
	  background: var(--blue);
  }
  #content main .table-data .order table div div .status.process {
	  background: var(--yellow);
  }
  #content main .table-data .order table div div .status.pending {
	  background: var(--orange);
  }
  
  
  #content main .table-data .todo {
	  flex-grow: 1;
	  flex-basis: 300px;
  }
  #content main .table-data .todo .todo-list {
	  width: 100%;
  }
  #content main .table-data .todo .todo-list li {
	  width: 100%;
	  margin-bottom: 16px;
	  background: var(--grey);
	  border-radius: 10px;
	  padding: 14px 20px;
	  display: flex;
	  justify-content: space-between;
	  align-items: center;
  }
  #content main .table-data .todo .todo-list li .bx {
	  cursor: pointer;
  }
  #content main .table-data .todo .todo-list li.completed {
	  border-left: 10px solid var(--blue);
  }
  #content main .table-data .todo .todo-list li.not-completed {
	  border-left: 10px solid var(--orange);
  }
  #content main .table-data .todo .todo-list li:last-child {
	  margin-bottom: 0;
  }
  /* MAIN */
  /* CONTENT */
  
  
  
  
  
  
  
  
  
  @media screen and (max-width: 768px) {
	  #sidebar {
		  width: 200px;
	  }
  
	  #content {
		  width: calc(100% - 60px);
		  left: 200px;
	  }
  
	  #content nav .nav-link {
		  display: none;
	  }
  }
  
  
  
  
  
  
  @media screen and (max-width: 576px) {
	  #content nav form .form-input input {
		  display: none;
	  }
  
	  #content nav form .form-input button {
		  width: auto;
		  height: auto;
		  background: divansparent;
		  border-radius: none;
		  color: var(--dark);
	  }
  
	  #content nav form.show .form-input input {
		  display: block;
		  width: 100%;
	  }
	  #content nav form.show .form-input button {
		  width: 36px;
		  height: 100%;
		  border-radius: 0 36px 36px 0;
		  color: var(--light);
		  background: var(--red);
	  }
  
	  #content nav form.show ~ .notification,
	  #content nav form.show ~ .profile {
		  display: none;
	  }
  
	  #content main .box-info {
		  grid-template-columns: 1fr;
	  }
  
	  #content main .table-data .head {
		  min-width: 420px;
	  }
	  #content main .table-data .order table {
		  min-width: 420px;
	  }
	  #content main .table-data .todo .todo-list {
		  min-width: 420px;
	  }
  }
  h1 {
	color: #0b92ec;
  }
  
  table {
	width: 50%;
	border-collapse: collapse;
	margin-top: 20px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	overflow: hidden;
	border: none;
  }
  
  th, div {
	border: 1px solid #ddd;
	padding: 12px;
	border: 1px solid var(--dark);
  }
  
  th {
	background-color: #119efc;
	color: #fff;
  
  }
  
  div{
	background-color:var(--grey);
	border-radius: 0.5rem;
  }
  
  
  #backButton {
	  background-color: #3498db;
	  color: #fff;
	  border: none;
	  padding: 10px 20px;
	  font-size: 16px;
	  cursor: pointer;
	  border-radius: 5px;
	  margin-top: 20px;
	}
  
	#backButton:hover {
	  background-color: #2980b9;
	}
	
	.data{
	  margin-left: 0.5rem;
	  color: var(--h1-color);
	  
	}
  
	.row{
	  margin-top: 1rem;
	  border-radius: 0.5rem;
	  background:var(--grey);
	  padding: 10px;
	  border: 1px solid var(--dark);
	  font-size: large;
	  border-radius: 1.5rem;
	  box-shadow: 0 0 10px var(--dark);
	}
  
	.row i{
	  background:var(--light-blue);
	  color:var(--dark);
	  padding: 5px;
	  border-radius: 0.5rem;
	  margin-top: 0.5rem;
	  margin-right: 0.2rem;
	  margin-left: 0.2rem;
	  margin-bottom: 0.2rem;
	  border: 1px solid var(--dark);
	  cursor: pointer;
	}
  
	.id {
	  display: block;
	  width: 50px;
	  text-align: center;
	  background:var(--dark); 
	  color: var(--grey); 
	  padding: 5px 10px; 
	  border-radius: 5px; 
	  margin-bottom: 10px; 
	}
  
	main ul{
	  background:var(--light-blue);
	  padding: 10px;
	  text-align: center;
	  border: 1px solid var(--dark);
	  font-size: large;
	  border-radius: 1.5rem;
	  box-shadow: 0 0 10px var(--dark);
	}

	
	nav label{
		border: 0.5px solid var(--h1-color);
	}

	.user{
		border-radius: 1rem;
		background:var(--light-blue);
	}

	.user div{
		background-color: var(--light);
	}

/* CSS for Bar Chart */
#userBarChart {
    width: 30%; /* Set the width of the chart */
    background-color: #ffffff; /* Chart background color */
}

/* Legend */
#userBarChart + .chartjs-wrapper .chartjs-legend ul {
    list-style: none;
    padding: 0;
    margin: 10px 0;
}

#userBarChart + .chartjs-wrapper .chartjs-legend ul li {
    display: inline-block;
    margin-right: 20px;
}

/* Axes */
#userBarChart + .chartjs-wrapper .chartjs-axis {
    color: #333333; /* Axis label color */
}

#userBarChart + .chartjs-wrapper .chartjs-axis-x .tick,
#userBarChart + .chartjs-wrapper .chartjs-axis-y .tick {
    fill: #333333; /* Axis tick text color */
    stroke: #333333; /* Axis tick line color */
}

/* Tooltip */
#userBarChart + .chartjs-wrapper .chartjs-tooltip {
    background-color: rgba(0, 0, 0, 0.7); /* Tooltip background color */
    color: #ffffff; /* Tooltip text color */
}

.graph{
	margin-top: 1.5rem;
	width: 85%;
	border-bottom-left-radius: 1rem;
}

.graph1{
	margin-top: 1.5rem;
	width: 85%;
	border-bottom-left-radius: 1rem;
}
  
  canvas {
	background-color: #f9f9f9;
	border-radius: 5px;
	border: 1px solid black;
	box-shadow: 0 0 10px rgb(165, 164, 164);
  }

  .date{
	margin-top: 1.5rem;
	width: 53vw;
	margin-left: -4rem;
	border-bottom-right-radius: 1rem;
  }
  
  .teacher-date{
	margin-top: 1.5rem;
	width: 53vw;
	margin-left: -4rem;
	border-bottom-right-radius: 1rem;
  }

  #previousTeacherWeek, #previousWeek {
    padding: 5px 10px;
    cursor: pointer;
    margin-top: 0.5rem;
    border-radius: 0.3rem;
    border: none;
    display: inline-block;
	margin-left: 1rem;
	float: left;
	background: var(--dark);
	color: var(--light);
	font-weight: bold;
  }

  #nextTeacherWeek, #nextWeek{
	padding: 5px 10px;
    cursor: pointer;
    margin-top: 0.5rem;
    border-radius: 0.3rem;
    border: none;
    display: inline-block;
	float: right;
	margin-right: 1rem;
	background: var(--dark);
	color: var(--light);
	font-weight: bold;
  }

  .head{
	text-align: center;
	margin-top: 2rem;
	margin-bottom: -1rem;
	color: var(--dark);
	background: var(--light-blue);
  }

  .stu{
	text-align: center;
	margin-top: 5rem;
	margin-bottom: -1rem;
	color: var(--dark);
	background: var(--light-blue);
  }

</style>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const switchMode = document.getElementById('switch-mode');
	
		// Retrieve user preference from localStorage
		const darkModePreference = localStorage.getItem('switch-mode');
	
		// Set the initial state based on user preference
		if (darkModePreference === 'dark') {
			document.body.classList.add('dark');
			switchMode.checked = true;
		} else {
			document.body.classList.remove('dark');
			switchMode.checked = false;
		}
	
		// Listen for changes in the switch
		switchMode.addEventListener('change', function () {
			// Toggle dark mode class on the body
			document.body.classList.toggle('dark', this.checked);
	
			// Store user preference in localStorage
			localStorage.setItem('switch-mode', this.checked ? 'dark' : 'light');
		});
	});

	document.addEventListener('DOMContentLoaded', () => {
		// Fetch and display count of new users
		const newUserCountElement = document.getElementById('newUserCount');
		fetch('/new-count')
		  .then(response => response.json())
		  .then(data => {
			const newUserCount = data.count;
			newUserCountElement.textContent = newUserCount;
		  })
		  .catch(error => {
			console.error('Error fetching new user count:', error);
			newUserCountElement.textContent = 'Error';
		  });
	  
		// Fetch and display count of total users
		const totalUsersCountElement = document.getElementById('totalUsersCount');
		fetch('/allUsers')
		  .then(response => response.json())
		  .then(data => {
			const totalUsersCount = data.totalUsers;
			totalUsersCountElement.textContent = totalUsersCount;
		  })
		  .catch(error => {
			console.error('Error fetching total users count:', error);
			totalUsersCountElement.textContent = 'Error';
		  });
	  
		// Fetch and display count of maximum users
		const maxUsersCountElement = document.getElementById('maxUsersCount');
		fetch('/totalsUsers')
		  .then(response => response.json())
		  .then(data => {
			const maxUsersCount = data.maxUsers;
			maxUsersCountElement.textContent = maxUsersCount;
		  })
		  .catch(error => {
			console.error('Error fetching maximum users count:', error);
			maxUsersCountElement.textContent = 'Error';
		  });
	  });
	  
	  fetch('/new-user-count')
.then(response => response.json())
.then(data => {
  // Update the newUserCount element with the fetched count
  const newUserCountElement = document.getElementById('newUserCount');
  newUserCountElement.textContent = data.count;
})
.catch(error => console.error('Error fetching new user count:', error));

fetch('/totalUsers')
  .then(response => response.json())
  .then(data => {
    const totalUsers = data.totalUsers;
    const totalUsersCount = document.getElementById('totalUsersCount');
    totalUsersCount.innerHTML = totalUsers; // Just update the text content
  })
  .catch(error => console.error('Error fetching total users count:', error));

  document.addEventListener('DOMContentLoaded', () => {
	const maxUserCountElement = document.getElementById('maxUserCount');
  
	fetch('/MaxUsers')
	  .then(response => {
		if (!response.ok) {
		  throw new Error('Network response was not ok');
		}
		return response.json();
	  })
	  .then(data => {
		const maxUserCount = data.maxUsers;
		maxUserCountElement.textContent = maxUserCount;
	  })
	  .catch(error => {
		console.error('Error fetching max users count:', error);
		maxUserCountElement.textContent = 'Error';
	  });
  });

  fetch('/new-user-count')
  .then(response => response.json())
  .then(data => {
	  const newUserCountxElement = document.getElementById('newUserCountx');
	  newUserCountxElement.textContent = data.count;
  })
  .catch(error => console.error('Error fetching new user count:', error));

fetch('/totalUsers')
  .then(response => response.json())
  .then(data => {
	  const totalUsers = data.totalUsers;
	  const totalUsersCountx = document.getElementById('totalUsersCountx');
	  totalUsersCountx.textContent = totalUsers; // Just update the text content
  })
  .catch(error => console.error('Error fetching total users count:', error));

document.addEventListener('DOMContentLoaded', () => {
  const maxUserCountElement = document.getElementById('maxUserCount');
});

  
	document.addEventListener('DOMContentLoaded', () => {
	  const maxUserCountElement = document.getElementById('maxUserCount');
	
	  fetch('/MaxUsers')
		.then(response => {
		  if (!response.ok) {
			throw new Error('Network response was not ok');
		  }
		  return response.json();
		})
		.then(data => {
		  const maxUserCount = data.maxUsers;
		  maxUserCountElement.textContent = maxUserCount;
		})
		.catch(error => {
		  console.error('Error fetching max users count:', error);
		  maxUserCountElement.textContent = 'Error';
		});
	});

	document.addEventListener('DOMContentLoaded', () => {
		let newUserCountx, totalUsersCountx, maxUsers;
	
		// Fetch the count of new users
		fetch('/new-user-count')
			.then(response => response.json())
			.then(data => {
				newUserCountx = data.count;
				return fetch('/totalUsers');
			})
			.then(response => response.json())
			.then(data => {
				totalUsersCountx = data.totalUsers;
				return fetch('/MaxUsers');
			})
			.then(response => response.json())
			.then(data => {
				maxUsers = data.maxUsers;
	
				// Create the data for the bar chart
				const labels = [ 'Total Users', 'New Users', 'Old Users'];
				const values = [maxUsers, newUserCountx, maxUsers - newUserCountx];

				
	
				// Get the canvas element where the chart will be drawn
				const ctx = document.getElementById('userBarChart').getContext('2d');
	
				// Create the bar chart
				const barChart = new Chart(ctx, {
					type: 'bar',
					data: {
						labels: labels,
						datasets: [{
							label: 'Total Count',
							data: values,
							backgroundColor: [
								'rgba(255, 99, 132, 0.5)', // New Users color
								'rgba(54, 162, 235, 0.5)', // Old Users color
								'rgba(255, 206, 86, 0.5)' // Max Users color
							],
							borderColor: [
								'rgba(255, 99, 132, 1)',
								'rgba(54, 162, 235, 1)',
								'rgba(255, 206, 86, 1)'
							],
							borderWidth: 1
						}]
					},
					options: {
						responsive: true,
						legend: {
							position: 'bottom'
						},
						scales: {
							yAxes: [{
								ticks: {
									beginAtZero: true
								}
							}]
						}
					}
				});
			})
			.catch(error => console.error('Error fetching user count data:', error));
	});
	
	document.addEventListener('DOMContentLoaded', () => {
		let newUserCount, totalUsersCount, maxUsers;
	
		// Fetch the count of new users
		fetch('/new-count')
			.then(response => response.json())
			.then(data => {
				newUserCount = data.count;
				return fetch('/totalUsers');
			})
			.then(response => response.json())
			.then(data => {
				totalUsersCount = data.totalUsers; // Corrected variable name
				return fetch('/totalsUsers'); // Corrected API endpoint
			})
			.then(response => response.json())
			.then(data => {
				maxUsers = data.maxUsers;
	
				// Create the data for the bar chart
				const labels = ['Total Users', 'New Users', 'Old Users']; // Corrected label order
				const values = [maxUsers, newUserCount, maxUsers - newUserCount]; // Corrected values calculation
	
				// Get the canvas element where the chart will be drawn
				const ctx = document.getElementById('userBarChart1').getContext('2d');
	
				// Create the bar chart
				const barChart = new Chart(ctx, {
					type: 'bar',
					data: {
						labels: labels,
						datasets: [{
							label: 'Total Count',
							data: values,
							backgroundColor: [
								'rgba(255, 99, 132, 0.5)', // New Users color
								'rgba(54, 162, 235, 0.5)', // Old Users color
								'rgba(255, 206, 86, 0.5)' // Max Users color
							],
							borderColor: [
								'rgba(255, 99, 132, 1)',
								'rgba(54, 162, 235, 1)',
								'rgba(255, 206, 86, 1)'
							],
							borderWidth: 1
						}]
					},
					options: {
						responsive: true,
						legend: {
							position: 'bottom'
						},
						scales: {
							yAxes: [{
								ticks: {
									beginAtZero: true
								}
							}]
						}
					}
				});
			})
			.catch(error => console.error('Error fetching user count data:', error));
	});
	
	
	fetch('/data')
            .then(response => response.json())
            .then(data => {
                const dates = data.map(row => row.date);
                const userCounts = data.map(row => row.user_count);

                const trace = {
                    x: dates,
                    y: userCounts,
                    type: 'bar'
                };

                const layout = {
                    title: 'User Count by Date',
                    xaxis: { title: 'Date' },
                    yaxis: { title: 'User Count' }
                };

                Plotly.newPlot('userCountGraph', [trace], layout);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });

			document.addEventListener("DOMContentLoaded", function() {
				let currentDate = new Date(); // Current date
				currentDate.setHours(0, 0, 0, 0); // Set time to midnight for accurate comparison
			
				// Function to fetch data from the server for the specified week
				function fetchDataForWeek(date) {
					// Set to the first day of the week (Sunday)
					const startOfWeek = new Date(date);
					startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
			
					// Set to the last day of the week (Saturday)
					const endOfWeek = new Date(date);
					endOfWeek.setDate(startOfWeek.getDate() + 6); // Add 6 days to get to the end of the week
			
					// Format start and end dates in YYYY-MM-DD format
					const startDateString = startOfWeek.toISOString().split('T')[0];
					const endDateString = endOfWeek.toISOString().split('T')[0];
			
					// Fetch data for the week from the server
					fetch(`/data?startDate=${startDateString}&endDate=${endDateString}`)
						.then(response => response.json())
						.then(data => {
							renderChart(data);
						})
						.catch(error => {
							console.error('Error fetching data:', error);
						});
				}
			
				// Function to render the chart
				function renderChart(data) {
					const dates = data.map(row => formatDate(row.date)); // Dates for the week
					const userCounts = data.map(row => row.user_count);
					const colors = [
    //'rgba(54, 162, 235, 0.5)', // Blue
    //'rgba(255, 99, 132, 0.5)', // Red
    //'rgba(255, 205, 86, 0.5)', // Yellow
    //'rgba(75, 192, 192, 0.5)', // Green
    'rgba(153, 102, 255, 0.5)', // Purple
   // 'rgba(255, 159, 64, 0.5)', // Orange
   // 'rgba(0, 128, 128, 0.5)' // Teal
];

			
					// Get the canvas element
					const ctx = document.getElementById('userCountChart').getContext('2d');
			
					// Check if there's an existing chart instance
					if (window.userCountChartInstance) {
						// Destroy the existing chart instance
						window.userCountChartInstance.destroy();
					}
			
					// Create a new Chart instance
					window.userCountChartInstance = new Chart(ctx, {
						type: 'bar',
						data: {
							labels: dates,
							datasets: [{
								label: 'User Count',
								data: userCounts,
								backgroundColor: colors, // Assign colors to bars
								borderColor: 'purple',
								borderWidth: 1
							}]
						},
						options: {
							scales: {
								yAxes: [{
									ticks: {
										beginAtZero: true
									}
								}]
							}
						}
					});
				}
			
				// Event listener for previous week button
				document.getElementById('previousWeek').addEventListener('click', () => {
					currentDate.setDate(currentDate.getDate() - 7); // Move back by 7 days
					fetchDataForWeek(currentDate);
				});
			
				// Event listener for next week button
				document.getElementById('nextWeek').addEventListener('click', () => {
					currentDate.setDate(currentDate.getDate() + 7); // Move forward by 7 days
					fetchDataForWeek(currentDate);
				});
			
				// Fetch data for the current week on page load
				fetchDataForWeek(currentDate);
			
				// Function to format date (remove time part) and include day name on the next line
				function formatDate(dateString) {
					const date = new Date(dateString);
					const options = { year: 'numeric', month: 'short', day: 'numeric' };
					const formattedDate = date.toLocaleDateString('en-US', options);
					const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
					return `${formattedDate}\n${dayName}`; // Adjust the number of spaces as needed
				}
			});
			

document.addEventListener("DOMContentLoaded", function() {
    let currentTeacherDate = new Date(); // Current date
    currentTeacherDate.setHours(0, 0, 0, 0); // Set time to midnight for accurate comparison

    // Function to fetch data from the server for the specified teacher week
    function fetchTeacherDataForWeek(date) {
        // Set to the first day of the teacher week (Sunday)
        const startOfTeacherWeek = new Date(date);
        startOfTeacherWeek.setDate(startOfTeacherWeek.getDate() - startOfTeacherWeek.getDay());

        // Set to the last day of the teacher week (Saturday)
        const endOfTeacherWeek = new Date(date);
        endOfTeacherWeek.setDate(startOfTeacherWeek.getDate() + 6); // Add 6 days to get to the end of the week

        // Format start and end dates in YYYY-MM-DD format
        const startTeacherDateString = startOfTeacherWeek.toISOString().split('T')[0];
        const endTeacherDateString = endOfTeacherWeek.toISOString().split('T')[0];

        // Fetch data for the teacher week from the server
        fetch(`/teacherData?startDate=${startTeacherDateString}&endDate=${endTeacherDateString}`)
            .then(response => response.json())
            .then(data => {
                renderTeacherChart(data);
            })
            .catch(error => {
                console.error('Error fetching teacher data:', error);
            });
    }

    // Function to render the teacher chart
    function renderTeacherChart(data) {
        const dates = data.map(row => formatDate(row.date)); // Dates for the teacher week
        const teacherCounts = data.map(row => row.teacher_count);

        // Get the canvas element
        const ctx = document.getElementById('teacherCountChart').getContext('2d');

        // Check if there's an existing chart instance
        if (window.teacherCountChartInstance) {
            // Destroy the existing chart instance
            window.teacherCountChartInstance.destroy();
        }

        // Create a new Chart instance for the teacher
        window.teacherCountChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Teacher Count',
                    data: teacherCounts,
                    backgroundColor: 'rgba(153, 102, 255, 0.5)',
                    borderColor: 'purple',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }

    // Event listener for previous teacher week button
    document.getElementById('previousTeacherWeek').addEventListener('click', () => {
        currentTeacherDate.setDate(currentTeacherDate.getDate() - 7); // Move back by 7 days
        fetchTeacherDataForWeek(currentTeacherDate);
    });

    // Event listener for next teacher week button
    document.getElementById('nextTeacherWeek').addEventListener('click', () => {
        currentTeacherDate.setDate(currentTeacherDate.getDate() + 7); // Move forward by 7 days
        fetchTeacherDataForWeek(currentTeacherDate);
    });

    // Fetch data for the current teacher week on page load
    fetchTeacherDataForWeek(currentTeacherDate);

    // Function to format date (remove time part) and include day name on the next line
    function formatDate(dateString) {
        const date = new Date(dateString);
        const options = { year: 'numeric', month: 'short', day: 'numeric' };
        const formattedDate = date.toLocaleDateString('en-US', options);
        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
        return `${formattedDate}\n${dayName}`; // Adjust the number of spaces as needed
    }
});

</script>

</html>